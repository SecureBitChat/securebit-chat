// File Transfer Component for Chat Interface - Fixed Version
const FileTransferComponent = ({ webrtcManager, isConnected }) => {
    const [dragOver, setDragOver] = React.useState(false);
    const [transfers, setTransfers] = React.useState({ sending: [], receiving: [] });
    const [readyFiles, setReadyFiles] = React.useState([]); // —Ñ–∞–π–ª—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
    const fileInputRef = React.useRef(null);

    // Update transfers periodically
    React.useEffect(() => {
        if (!isConnected || !webrtcManager) return;

        const updateTransfers = () => {
            const currentTransfers = webrtcManager.getFileTransfers();
            setTransfers(currentTransfers);
        };

        const interval = setInterval(updateTransfers, 500);
        return () => clearInterval(interval);
    }, [isConnected, webrtcManager]);

    // Setup file transfer callbacks - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    React.useEffect(() => {
        if (!webrtcManager) return;

        webrtcManager.setFileTransferCallbacks(
            // Progress callback - –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª—è–µ–º UI, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            (progress) => {
                console.log(`üìÅ UI Progress: ${progress.fileName}: ${progress.progress.toFixed(1)}% (${progress.status})`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const currentTransfers = webrtcManager.getFileTransfers();
                setTransfers(currentTransfers);
                
                // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç!
            },
            
            // File received callback - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ UI
            (fileData) => {
                console.log(`üì• File received in UI: ${fileData.fileName}`);
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
                setReadyFiles(prev => {
                    // –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π –ø–æ fileId
                    if (prev.some(f => f.fileId === fileData.fileId)) return prev;
                    return [...prev, {
                        fileId: fileData.fileId,
                        fileName: fileData.fileName,
                        fileSize: fileData.fileSize,
                        mimeType: fileData.mimeType,
                        getBlob: fileData.getBlob,
                        getObjectURL: fileData.getObjectURL,
                        revokeObjectURL: fileData.revokeObjectURL
                    }];
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
                const currentTransfers = webrtcManager.getFileTransfers();
                setTransfers(currentTransfers);
            },
            
            // Error callback
            (error) => {
                console.error('File transfer error in UI:', error);
                const currentTransfers = webrtcManager.getFileTransfers();
                setTransfers(currentTransfers);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ WebRTC –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            }
        );
    }, [webrtcManager]);

    const handleFileSelect = async (files) => {
        if (!isConnected || !webrtcManager) {
            alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            return;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (!webrtcManager.isConnected() || !webrtcManager.isVerified) {
            alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
            return;
        }

        for (const file of files) {
            try {
                console.log(`üöÄ Starting file upload from UI: ${file.name}`);
                await webrtcManager.sendFile(file);
            } catch (error) {
                // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                console.error(`Failed to send ${file.name}:`, error);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if (error.message.includes('Connection not ready')) {
                    alert(`–§–∞–π–ª ${file.name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ–π—á–∞—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
                } else if (error.message.includes('File too large')) {
                    alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 MB`);
                } else if (error.message.includes('Maximum concurrent transfers')) {
                    alert(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–¥–∞—á.`);
                } else {
                    alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}: ${error.message}`);
                }
            }
        }
    };

    const handleDrop = (e) => {
        e.preventDefault();
        setDragOver(false);
        
        const files = Array.from(e.dataTransfer.files);
        handleFileSelect(files);
    };

    const handleDragOver = (e) => {
        e.preventDefault();
        setDragOver(true);
    };

    const handleDragLeave = (e) => {
        e.preventDefault();
        setDragOver(false);
    };

    const handleFileInputChange = (e) => {
        const files = Array.from(e.target.files);
        handleFileSelect(files);
        e.target.value = ''; // Reset input
    };

    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    const getStatusIcon = (status) => {
        switch (status) {
            case 'metadata_sent':
            case 'preparing':
                return 'fas fa-cog fa-spin';
            case 'transmitting':
            case 'receiving':
                return 'fas fa-exchange-alt fa-pulse';
            case 'assembling':
                return 'fas fa-puzzle-piece fa-pulse';
            case 'completed':
                return 'fas fa-check text-green-400';
            case 'failed':
                return 'fas fa-times text-red-400';
            default:
                return 'fas fa-circle';
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'metadata_sent':
                return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...';
            case 'transmitting':
                return '–û—Ç–ø—Ä–∞–≤–∫–∞...';
            case 'receiving':
                return '–ü–æ–ª—É—á–µ–Ω–∏–µ...';
            case 'assembling':
                return '–°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–∞...';
            case 'completed':
                return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
            case 'failed':
                return '–û—à–∏–±–∫–∞';
            default:
                return status;
        }
    };

    if (!isConnected) {
        return React.createElement('div', {
            className: "p-4 text-center text-muted"
        }, '–ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const isConnectionReady = webrtcManager && webrtcManager.isConnected() && webrtcManager.isVerified;
    
    if (!isConnectionReady) {
        return React.createElement('div', {
            className: "p-4 text-center text-yellow-600"
        }, [
            React.createElement('i', {
                key: 'icon',
                className: 'fas fa-exclamation-triangle mr-2'
            }),
            '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è... –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.'
        ]);
    }

    return React.createElement('div', {
        className: "file-transfer-component"
    }, [
        // File Drop Zone
        React.createElement('div', {
            key: 'drop-zone',
            className: `file-drop-zone ${dragOver ? 'drag-over' : ''}`,
            onDrop: handleDrop,
            onDragOver: handleDragOver,
            onDragLeave: handleDragLeave,
            onClick: () => fileInputRef.current?.click()
        }, [
            React.createElement('div', {
                key: 'drop-content',
                className: "drop-content"
            }, [
                React.createElement('i', {
                    key: 'icon',
                    className: 'fas fa-cloud-upload-alt text-2xl mb-2 text-blue-400'
                }),
                React.createElement('p', {
                    key: 'text',
                    className: "text-primary font-medium"
                }, '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'),
                React.createElement('p', {
                    key: 'subtext',
                    className: "text-muted text-sm"
                }, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –ú–ë –Ω–∞ —Ñ–∞–π–ª')
            ])
        ]),

        // Hidden file input
        React.createElement('input', {
            key: 'file-input',
            ref: fileInputRef,
            type: 'file',
            multiple: true,
            className: 'hidden',
            onChange: handleFileInputChange
        }),

        // Active Transfers
        (transfers.sending.length > 0 || transfers.receiving.length > 0) && React.createElement('div', {
            key: 'transfers',
            className: "active-transfers mt-4"
        }, [
            React.createElement('h4', {
                key: 'title',
                className: "text-primary font-medium mb-3 flex items-center"
            }, [
                React.createElement('i', {
                    key: 'icon',
                    className: 'fas fa-exchange-alt mr-2'
                }),
                '–ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤'
            ]),

            // Sending files
            ...transfers.sending.map(transfer => 
                React.createElement('div', {
                    key: `send-${transfer.fileId}`,
                    className: "transfer-item bg-blue-500/10 border border-blue-500/20 rounded-lg p-3 mb-2"
                }, [
                    React.createElement('div', {
                        key: 'header',
                        className: "flex items-center justify-between mb-2"
                    }, [
                        React.createElement('div', {
                            key: 'info',
                            className: "flex items-center"
                        }, [
                            React.createElement('i', {
                                key: 'icon',
                                className: 'fas fa-upload text-blue-400 mr-2'
                            }),
                            React.createElement('span', {
                                key: 'name',
                                className: "text-primary font-medium text-sm"
                            }, transfer.fileName),
                            React.createElement('span', {
                                key: 'size',
                                className: "text-muted text-xs ml-2"
                            }, formatFileSize(transfer.fileSize))
                        ]),
                        React.createElement('button', {
                            key: 'cancel',
                            onClick: () => webrtcManager.cancelFileTransfer(transfer.fileId),
                            className: "text-red-400 hover:text-red-300 text-xs"
                        }, [
                            React.createElement('i', {
                                className: 'fas fa-times'
                            })
                        ])
                    ]),
                    React.createElement('div', {
                        key: 'progress',
                        className: "progress-bar"
                    }, [
                        React.createElement('div', {
                            key: 'fill',
                            className: "progress-fill bg-blue-400",
                            style: { width: `${transfer.progress}%` }
                        }),
                        React.createElement('div', {
                            key: 'text',
                            className: "progress-text text-xs flex items-center justify-between"
                        }, [
                            React.createElement('span', {
                                key: 'status',
                                className: "flex items-center"
                            }, [
                                React.createElement('i', {
                                    key: 'icon',
                                    className: `${getStatusIcon(transfer.status)} mr-1`
                                }),
                                getStatusText(transfer.status)
                            ]),
                            React.createElement('span', {
                                key: 'percent'
                            }, `${transfer.progress.toFixed(1)}%`)
                        ])
                    ])
                ])
            ),

            // Receiving files
            ...transfers.receiving.map(transfer => 
                React.createElement('div', {
                    key: `recv-${transfer.fileId}`,
                    className: "transfer-item bg-green-500/10 border border-green-500/20 rounded-lg p-3 mb-2"
                }, [
                    React.createElement('div', {
                        key: 'header',
                        className: "flex items-center justify-between mb-2"
                    }, [
                        React.createElement('div', {
                            key: 'info',
                            className: "flex items-center"
                        }, [
                            React.createElement('i', {
                                key: 'icon',
                                className: 'fas fa-download text-green-400 mr-2'
                            }),
                            React.createElement('span', {
                                key: 'name',
                                className: "text-primary font-medium text-sm"
                            }, transfer.fileName),
                            React.createElement('span', {
                                key: 'size',
                                className: "text-muted text-xs ml-2"
                            }, formatFileSize(transfer.fileSize))
                        ]),
                        React.createElement('div', { key: 'actions', className: 'flex items-center space-x-2' }, [
                            // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≥–æ—Ç–æ–≤ (–µ—Å—Ç—å –≤ readyFiles)
                            (() => {
                                const rf = readyFiles.find(f => f.fileId === transfer.fileId);
                                if (!rf || transfer.status !== 'completed') return null;
                                return React.createElement('button', {
                                    key: 'download',
                                    className: 'text-green-400 hover:text-green-300 text-xs flex items-center',
                                    onClick: async () => {
                                        try {
                                            const url = await rf.getObjectURL();
                                            const a = document.createElement('a');
                                            a.href = url;
                                            a.download = rf.fileName || 'file';
                                            a.click();
                                            rf.revokeObjectURL(url);
                                        } catch (e) {
                                            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ' + e.message);
                                        }
                                    }
                                }, [
                                    React.createElement('i', { key: 'i', className: 'fas fa-download mr-1' }),
                                    '–°–∫–∞—á–∞—Ç—å'
                                ]);
                            })(),
                            React.createElement('button', {
                                key: 'cancel',
                                onClick: () => webrtcManager.cancelFileTransfer(transfer.fileId),
                                className: "text-red-400 hover:text-red-300 text-xs"
                            }, [
                                React.createElement('i', {
                                    className: 'fas fa-times'
                                })
                            ])
                        ])
                    ]),
                    React.createElement('div', {
                        key: 'progress',
                        className: "progress-bar"
                    }, [
                        React.createElement('div', {
                            key: 'fill',
                            className: "progress-fill bg-green-400",
                            style: { width: `${transfer.progress}%` }
                        }),
                        React.createElement('div', {
                            key: 'text',
                            className: "progress-text text-xs flex items-center justify-between"
                        }, [
                            React.createElement('span', {
                                key: 'status',
                                className: "flex items-center"
                            }, [
                                React.createElement('i', {
                                    key: 'icon',
                                    className: `${getStatusIcon(transfer.status)} mr-1`
                                }),
                                getStatusText(transfer.status)
                            ]),
                            React.createElement('span', {
                                key: 'percent'
                            }, `${transfer.progress.toFixed(1)}%`)
                        ])
                    ])
                ])
            )
        ])
    ]);
};

// Export
window.FileTransferComponent = FileTransferComponent;