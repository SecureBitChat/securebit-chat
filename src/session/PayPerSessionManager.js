class PayPerSessionManager {
    constructor(config = {}) {
        this.sessionPrices = {
            // –ë–ï–ó–û–ü–ê–°–ù–´–ô demo —Ä–µ–∂–∏–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            demo: { sats: 0, hours: 0.1, usd: 0.00 }, // 6 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            basic: { sats: 500, hours: 1, usd: 0.20 },
            premium: { sats: 1000, hours: 4, usd: 0.40 },
            extended: { sats: 2000, hours: 24, usd: 0.80 }
        };
        
        this.currentSession = null;
        this.sessionTimer = null;
        this.onSessionExpired = null;
        this.staticLightningAddress = "dullpastry62@walletofsatoshi.com";
        
        // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö preimage –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.usedPreimages = new Set();
        this.preimageCleanupInterval = null;
        
        // DEMO —Ä–µ–∂–∏–º: –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
        this.demoSessions = new Map(); // fingerprint -> { count, lastUsed, sessions }
        this.maxDemoSessionsPerUser = 3; // –ú–∞–∫—Å–∏–º—É–º 3 demo —Å–µ—Å—Å–∏–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.demoCooldownPeriod = 60 * 60 * 1000; // 1 —á–∞—Å –º–µ–∂–¥—É —Å–µ—Ä–∏—è–º–∏ demo —Å–µ—Å—Å–∏–π
        this.demoSessionCooldown = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ demo —Å–µ—Å—Å–∏—è–º–∏
        this.demoSessionMaxDuration = 6 * 60 * 1000; // 6 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ demo —Å–µ—Å—Å–∏—é
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –º–∏–∫—Ä–æ–ø–ª–∞—Ç–µ–∂–µ–π-–∞—Ç–∞–∫)
        this.minimumPaymentSats = 100;
        
        this.verificationConfig = {
            method: config.method || 'lnbits',
            apiUrl: config.apiUrl || 'https://demo.lnbits.com',
            apiKey: config.apiKey || '623515641d2e4ebcb1d5992d6d78419c', 
            walletId: config.walletId || 'bcd00f561c7b46b4a7b118f069e68997',
            isDemo: config.isDemo !== undefined ? config.isDemo : true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é demo —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω
            demoTimeout: 30000, 
            retryAttempts: 3,
            invoiceExpiryMinutes: 15
        };
        
        // Rate limiting –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        this.lastApiCall = 0;
        this.apiCallMinInterval = 1000; // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É API –≤—ã–∑–æ–≤–∞–º–∏
        
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        this.startPreimageCleanup();
        this.startDemoSessionCleanup();
        
        console.log('üí∞ PayPerSessionManager initialized with secure demo mode');
    }

    // ============================================
    // DEMO –†–ï–ñ–ò–ú: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å
    // ============================================

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö demo —Å–µ—Å—Å–∏–π (–∫–∞–∂–¥—ã–π —á–∞—Å)
    startDemoSessionCleanup() {
        setInterval(() => {
            const now = Date.now();
            const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            
            let cleanedCount = 0;
            for (const [identifier, data] of this.demoSessions.entries()) {
                if (now - data.lastUsed > maxAge) {
                    this.demoSessions.delete(identifier);
                    cleanedCount++;
                }
            }
            
            if (cleanedCount > 0) {
                console.log(`üßπ Cleaned ${cleanedCount} old demo session records`);
            }
        }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è demo —Å–µ—Å—Å–∏–π
    generateUserFingerprint() {
        try {
            const components = [
                navigator.userAgent || '',
                navigator.language || '',
                screen.width + 'x' + screen.height,
                Intl.DateTimeFormat().resolvedOptions().timeZone || '',
                navigator.hardwareConcurrency || 0,
                navigator.deviceMemory || 0,
                navigator.platform || '',
                navigator.cookieEnabled ? '1' : '0'
            ];
            
            // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            let hash = 0;
            const str = components.join('|');
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
            }
            
            return Math.abs(hash).toString(36);
        } catch (error) {
            console.warn('Failed to generate user fingerprint:', error);
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π ID (–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤)
            return 'fallback_' + Math.random().toString(36).substr(2, 9);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ demo —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    checkDemoSessionLimits(userFingerprint) {
        const userData = this.demoSessions.get(userFingerprint);
        const now = Date.now();
        
        if (!userData) {
            // –ü–µ—Ä–≤–∞—è demo —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return { 
                allowed: true, 
                reason: 'first_demo_session',
                remaining: this.maxDemoSessionsPerUser
            };
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö cooldown –ø–µ—Ä–∏–æ–¥–∞)
        const activeSessions = userData.sessions.filter(session => 
            now - session.timestamp < this.demoCooldownPeriod
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ demo —Å–µ—Å—Å–∏–π
        if (activeSessions.length >= this.maxDemoSessionsPerUser) {
            const oldestSession = Math.min(...activeSessions.map(s => s.timestamp));
            const timeUntilNext = this.demoCooldownPeriod - (now - oldestSession);
            
            return { 
                allowed: false, 
                reason: 'demo_limit_exceeded',
                timeUntilNext: timeUntilNext,
                message: `Demo limit reached (${this.maxDemoSessionsPerUser}/day). Try again in ${Math.ceil(timeUntilNext / (60 * 1000))} minutes.`,
                remaining: 0
            };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        if (userData.lastUsed && (now - userData.lastUsed) < this.demoSessionCooldown) {
            const timeUntilNext = this.demoSessionCooldown - (now - userData.lastUsed);
            return { 
                allowed: false, 
                reason: 'demo_cooldown',
                timeUntilNext: timeUntilNext,
                message: `Please wait ${Math.ceil(timeUntilNext / (60 * 1000))} minutes between demo sessions.`,
                remaining: this.maxDemoSessionsPerUser - activeSessions.length
            };
        }
        
        return { 
            allowed: true, 
            reason: 'within_limits',
            remaining: this.maxDemoSessionsPerUser - activeSessions.length
        };
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è demo —Å–µ—Å—Å–∏–∏
    registerDemoSessionUsage(userFingerprint) {
        const now = Date.now();
        const userData = this.demoSessions.get(userFingerprint) || {
            count: 0,
            lastUsed: 0,
            sessions: [],
            firstUsed: now
        };
        
        userData.count++;
        userData.lastUsed = now;
        userData.sessions.push({
            timestamp: now,
            sessionId: crypto.getRandomValues(new Uint32Array(1))[0].toString(36),
            duration: this.demoSessionMaxDuration
        });
        
        // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö cooldown –ø–µ—Ä–∏–æ–¥–∞)
        userData.sessions = userData.sessions
            .filter(session => now - session.timestamp < this.demoCooldownPeriod)
            .slice(-this.maxDemoSessionsPerUser);
        
        this.demoSessions.set(userFingerprint, userData);
        
        console.log(`üìä Demo session registered for user ${userFingerprint.substring(0, 8)}... (${userData.sessions.length}/${this.maxDemoSessionsPerUser})`);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–≥–æ demo preimage
    generateSecureDemoPreimage() {
        try {
            const timestamp = Date.now();
            const randomBytes = crypto.getRandomValues(new Uint8Array(24)); // 24 –±–∞–π—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const timestampBytes = new Uint8Array(4); // 4 –±–∞–π—Ç–∞ –¥–ª—è timestamp
            const versionBytes = new Uint8Array(4); // 4 –±–∞–π—Ç–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
            
            // –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º timestamp –≤ 4 –±–∞–π—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
            const timestampSeconds = Math.floor(timestamp / 1000);
            timestampBytes[0] = (timestampSeconds >>> 24) & 0xFF;
            timestampBytes[1] = (timestampSeconds >>> 16) & 0xFF;
            timestampBytes[2] = (timestampSeconds >>> 8) & 0xFF;
            timestampBytes[3] = timestampSeconds & 0xFF;
            
            // –ú–∞—Ä–∫–µ—Ä demo –≤–µ—Ä—Å–∏–∏
            versionBytes[0] = 0xDE; // 'DE'mo
            versionBytes[1] = 0xE0; // de'MO' (E0 –≤–º–µ—Å—Ç–æ MO)
            versionBytes[2] = 0x00; // –≤–µ—Ä—Å–∏—è 0
            versionBytes[3] = 0x01; // –ø–æ–¥–≤–µ—Ä—Å–∏—è 1
            
            // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (32 –±–∞–π—Ç–∞ total)
            const combined = new Uint8Array(32);
            combined.set(versionBytes, 0);      // –ë–∞–π—Ç—ã 0-3: –º–∞—Ä–∫–µ—Ä –≤–µ—Ä—Å–∏–∏
            combined.set(timestampBytes, 4);    // –ë–∞–π—Ç—ã 4-7: timestamp
            combined.set(randomBytes, 8);       // –ë–∞–π—Ç—ã 8-31: —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            const preimage = Array.from(combined).map(b => b.toString(16).padStart(2, '0')).join('');
            
            console.log(`üéÆ Generated secure demo preimage: ${preimage.substring(0, 16)}...`);
            return preimage;
            
        } catch (error) {
            console.error('Failed to generate demo preimage:', error);
            throw new Error('Failed to generate secure demo preimage');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ preimage demo
    isDemoPreimage(preimage) {
        if (!preimage || typeof preimage !== 'string' || preimage.length !== 64) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä demo (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ = 4 –±–∞–π—Ç–∞)
        return preimage.toLowerCase().startsWith('dee00001');
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ timestamp –∏–∑ demo preimage
    extractDemoTimestamp(preimage) {
        if (!this.isDemoPreimage(preimage)) {
            return null;
        }
        
        try {
            // Timestamp –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö 4-7 (—Å–∏–º–≤–æ–ª—ã 8-15)
            const timestampHex = preimage.slice(8, 16);
            const timestampSeconds = parseInt(timestampHex, 16);
            return timestampSeconds * 1000; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        } catch (error) {
            console.error('Failed to extract demo timestamp:', error);
            return null;
        }
    }

    // ============================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò
    // ============================================

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
    validateSessionType(sessionType) {
        if (!sessionType || typeof sessionType !== 'string') {
            throw new Error('Session type must be a non-empty string');
        }
        
        if (!this.sessionPrices[sessionType]) {
            throw new Error(`Invalid session type: ${sessionType}. Allowed: ${Object.keys(this.sessionPrices).join(', ')}`);
        }
        
        const pricing = this.sessionPrices[sessionType];
        
        // –î–ª—è demo —Å–µ—Å—Å–∏–∏ –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞
        if (sessionType === 'demo') {
            return true; // Demo –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω–∞ –ø–æ —Ç–∏–ø—É, –ª–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        }
        
        // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if (pricing.sats < this.minimumPaymentSats) {
            throw new Error(`Session type ${sessionType} below minimum payment threshold (${this.minimumPaymentSats} sats)`);
        }
        
        return true;
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ —Å—Ç—Ä–æ–∫–∏
    calculateEntropy(str) {
        const freq = {};
        for (let char of str) {
            freq[char] = (freq[char] || 0) + 1;
        }
        
        let entropy = 0;
        const length = str.length;
        for (let char in freq) {
            const p = freq[char] / length;
            entropy -= p * Math.log2(p);
        }
        
        return entropy;
    }

    // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ preimage
    async verifyCryptographically(preimage, paymentHash) {
        try {
            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
            if (!preimage || typeof preimage !== 'string') {
                throw new Error('Preimage must be a string');
            }
            
            if (preimage.length !== 64) {
                throw new Error(`Invalid preimage length: ${preimage.length}, expected 64`);
            }
            
            if (!/^[0-9a-fA-F]{64}$/.test(preimage)) {
                throw new Error('Preimage must be valid hexadecimal');
            }
            
            // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ demo preimage
            if (this.isDemoPreimage(preimage)) {
                console.log('üéÆ Demo preimage detected - performing enhanced validation...');
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º timestamp
                const demoTimestamp = this.extractDemoTimestamp(preimage);
                if (!demoTimestamp) {
                    throw new Error('Invalid demo preimage timestamp');
                }
                
                const now = Date.now();
                const age = now - demoTimestamp;
                
                // Demo preimage –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç
                if (age > 15 * 60 * 1000) {
                    throw new Error(`Demo preimage expired (age: ${Math.round(age / (60 * 1000))} minutes)`);
                }
                
                // Demo preimage –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –±—É–¥—É—â–µ–≥–æ (–∑–∞—â–∏—Ç–∞ –æ—Ç clock attack)
                if (age < -2 * 60 * 1000) { // –î–æ–ø—É—Å–∫–∞–µ–º 2 –º–∏–Ω—É—Ç—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —á–∞—Å–æ–≤
                    throw new Error('Demo preimage timestamp from future - possible clock manipulation');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                if (this.usedPreimages.has(preimage)) {
                    throw new Error('Demo preimage already used - replay attack prevented');
                }
                
                // Demo preimage –≤–∞–ª–∏–¥–µ–Ω
                this.usedPreimages.add(preimage);
                console.log('‚úÖ Demo preimage cryptographic validation passed');
                return true;
            }
            
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö preimage - –°–¢–†–û–ì–ò–ï –ø—Ä–æ–≤–µ—Ä–∫–∏
            
            // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ/–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            const forbiddenPatterns = [
                '0'.repeat(64),                    // –í—Å–µ –Ω—É–ª–∏
                '1'.repeat(64),                    // –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã
                'a'.repeat(64),                    // –í—Å–µ 'a'
                'f'.repeat(64),                    // –í—Å–µ 'f'
                '0123456789abcdef'.repeat(4),      // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
                'deadbeef'.repeat(8),              // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                'cafebabe'.repeat(8),              // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                'feedface'.repeat(8),              // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                'baadf00d'.repeat(8),              // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                'c0ffee'.repeat(10) + 'c0ff'       // –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            ];
            
            if (forbiddenPatterns.includes(preimage.toLowerCase())) {
                throw new Error('Forbidden preimage pattern detected - possible test/attack attempt');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if (this.usedPreimages.has(preimage)) {
                throw new Error('Preimage already used - replay attack prevented');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–π –¥–ª—è hex —Å—Ç—Ä–æ–∫–∏)
            const entropy = this.calculateEntropy(preimage);
            if (entropy < 3.5) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –¥–ª—è 64-—Å–∏–º–≤–æ–ª—å–Ω–æ–π hex —Å—Ç—Ä–æ–∫–∏
                throw new Error(`Preimage has insufficient entropy: ${entropy.toFixed(2)} (minimum: 3.5)`);
            }
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SHA256(preimage) = paymentHash
            const preimageBytes = new Uint8Array(preimage.match(/.{2}/g).map(byte => parseInt(byte, 16)));
            const hashBuffer = await crypto.subtle.digest('SHA-256', preimageBytes);
            const computedHash = Array.from(new Uint8Array(hashBuffer))
                .map(b => b.toString(16).padStart(2, '0')).join('');
            
            const isValid = computedHash === paymentHash.toLowerCase();
            
            if (isValid) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π preimage
                this.usedPreimages.add(preimage);
                console.log('‚úÖ Standard preimage cryptographic validation passed');
            } else {
                console.log('‚ùå SHA256 verification failed:', {
                    computed: computedHash.substring(0, 16) + '...',
                    expected: paymentHash.substring(0, 16) + '...'
                });
            }
            
            return isValid;
            
        } catch (error) {
            console.error('‚ùå Cryptographic verification failed:', error.message);
            return false;
        }
    }

    // ============================================
    // LIGHTNING NETWORK –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
    // ============================================

    // –°–æ–∑–¥–∞–Ω–∏–µ Lightning invoice
    async createLightningInvoice(sessionType) {
        const pricing = this.sessionPrices[sessionType];
        if (!pricing) throw new Error('Invalid session type');

        try {
            console.log(`Creating ${sessionType} invoice for ${pricing.sats} sats...`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å rate limiting
            const now = Date.now();
            if (now - this.lastApiCall < this.apiCallMinInterval) {
                throw new Error('API rate limit: please wait before next request');
            }
            this.lastApiCall = now;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ health API
            const healthCheck = await fetch(`${this.verificationConfig.apiUrl}/api/v1/health`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey
                },
                signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ timeout
            });

            if (!healthCheck.ok) {
                throw new Error(`LNbits API unavailable: ${healthCheck.status}`);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ invoice
            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments`, {
                method: 'POST',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    out: false, // incoming payment
                    amount: pricing.sats,
                    memo: `LockBit.chat ${sessionType} session (${pricing.hours}h) - ${Date.now()}`,
                    unit: 'sat',
                    expiry: this.verificationConfig.invoiceExpiryMinutes * 60 // –í —Å–µ–∫—É–Ω–¥–∞—Ö
                }),
                signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ timeout
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('LNbits API error response:', errorText);
                throw new Error(`LNbits API error ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            
            console.log('‚úÖ Lightning invoice created successfully');
            
            return {
                paymentRequest: data.bolt11 || data.payment_request,
                paymentHash: data.payment_hash,
                checkingId: data.checking_id || data.payment_hash,
                amount: data.amount || pricing.sats,
                sessionType: sessionType,
                createdAt: Date.now(),
                expiresAt: Date.now() + (this.verificationConfig.invoiceExpiryMinutes * 60 * 1000),
                description: data.description || data.memo || `LockBit.chat ${sessionType} session`,
                bolt11: data.bolt11 || data.payment_request,
                memo: data.memo || `LockBit.chat ${sessionType} session`
            };

        } catch (error) {
            console.error('‚ùå Lightning invoice creation failed:', error);
            
            // –î–ª—è demo —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π invoice
            if (this.verificationConfig.isDemo && error.message.includes('API')) {
                console.log('üîÑ Creating demo invoice for testing...');
                return this.createDemoInvoice(sessionType);
            }
            
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ demo invoice –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    createDemoInvoice(sessionType) {
        const pricing = this.sessionPrices[sessionType];
        const demoHash = Array.from(crypto.getRandomValues(new Uint8Array(32)))
            .map(b => b.toString(16).padStart(2, '0')).join('');
        
        return {
            paymentRequest: `lntb${pricing.sats}1p${demoHash.substring(0, 16)}...`,
            paymentHash: demoHash,
            checkingId: demoHash,
            amount: pricing.sats,
            sessionType: sessionType,
            createdAt: Date.now(),
            expiresAt: Date.now() + (5 * 60 * 1000), // 5 –º–∏–Ω—É—Ç
            description: `LockBit.chat ${sessionType} session (DEMO)`,
            isDemo: true
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ LNbits
    async checkPaymentStatus(checkingId) {
        try {
            console.log(`üîç Checking payment status for: ${checkingId?.substring(0, 8)}...`);

            // Rate limiting
            const now = Date.now();
            if (now - this.lastApiCall < this.apiCallMinInterval) {
                throw new Error('API rate limit exceeded');
            }
            this.lastApiCall = now;

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments/${checkingId}`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                },
                signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ timeout
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Payment status check failed:', errorText);
                throw new Error(`Payment check failed: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log('üìä Payment status retrieved successfully');
            
            return {
                paid: data.paid || false,
                preimage: data.preimage || null,
                details: data.details || {},
                amount: data.amount || 0,
                fee: data.fee || 0,
                timestamp: data.timestamp || Date.now(),
                bolt11: data.bolt11 || null
            };

        } catch (error) {
            console.error('‚ùå Payment status check error:', error);
            
            // –î–ª—è demo —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if (this.verificationConfig.isDemo && error.message.includes('API')) {
                console.log('üîÑ Returning demo payment status...');
                return {
                    paid: false,
                    preimage: null,
                    details: { demo: true },
                    amount: 0,
                    fee: 0,
                    timestamp: Date.now()
                };
            }
            
            throw error;
        }
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ LNbits API
    async verifyPaymentLNbits(preimage, paymentHash) {
        try {
            console.log(`üîê Verifying payment via LNbits API...`);
            
            if (!this.verificationConfig.apiUrl || !this.verificationConfig.apiKey) {
                throw new Error('LNbits API configuration missing');
            }

            // Rate limiting
            const now = Date.now();
            if (now - this.lastApiCall < this.apiCallMinInterval) {
                throw new Error('API rate limit: please wait before next verification');
            }
            this.lastApiCall = now;

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                },
                signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ timeout
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('LNbits verification failed:', errorText);
                throw new Error(`API request failed: ${response.status} - ${errorText}`);
            }

            const paymentData = await response.json();
            console.log('üìã Payment verification data received from LNbits');
            
            // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
            const isPaid = paymentData.paid === true;
            const preimageMatches = paymentData.preimage === preimage;
            const amountValid = paymentData.amount >= this.minimumPaymentSats;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            const paymentTimestamp = paymentData.timestamp || paymentData.time || 0;
            const paymentAge = now - (paymentTimestamp * 1000); // LNbits timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const maxPaymentAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            
            if (paymentAge > maxPaymentAge && paymentTimestamp > 0) {
                throw new Error(`Payment too old: ${Math.round(paymentAge / (60 * 60 * 1000))} hours (max: 24h)`);
            }
            
            if (isPaid && preimageMatches && amountValid) {
                console.log('‚úÖ Payment verified successfully via LNbits');
                return {
                    verified: true,
                    amount: paymentData.amount,
                    fee: paymentData.fee || 0,
                    timestamp: paymentTimestamp || now,
                    method: 'lnbits',
                    verificationTime: now,
                    paymentAge: paymentAge
                };
            }

            console.log('‚ùå LNbits payment verification failed:', {
                paid: isPaid,
                preimageMatch: preimageMatches,
                amountValid: amountValid,
                paymentAge: Math.round(paymentAge / (60 * 1000)) + ' minutes'
            });
            
            return {
                verified: false,
                reason: 'Payment verification failed: not paid, preimage mismatch, insufficient amount, or payment too old',
                method: 'lnbits',
                details: {
                    paid: isPaid,
                    preimageMatch: preimageMatches,
                    amountValid: amountValid,
                    paymentAge: paymentAge
                }
            };
            
        } catch (error) {
            console.error('‚ùå LNbits payment verification failed:', error);
            return {
                verified: false,
                reason: error.message,
                method: 'lnbits',
                error: true
            };
        }
    }

    // ============================================
    // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ü–õ–ê–¢–ï–ñ–ï–ô
    // ============================================

    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    async verifyPayment(preimage, paymentHash) {
        console.log(`üîê Starting payment verification...`);
        
        try {
            // –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            if (!preimage || !paymentHash) {
                throw new Error('Missing preimage or payment hash');
            }
            
            if (typeof preimage !== 'string' || typeof paymentHash !== 'string') {
                throw new Error('Preimage and payment hash must be strings');
            }
            
            // –≠—Ç–∞–ø 2: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ demo preimage
            if (this.isDemoPreimage(preimage)) {
                console.log('üéÆ Processing demo session verification...');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã demo —Å–µ—Å—Å–∏–π
                const userFingerprint = this.generateUserFingerprint();
                const demoCheck = this.checkDemoSessionLimits(userFingerprint);
                
                if (!demoCheck.allowed) {
                    return {
                        verified: false,
                        reason: demoCheck.message,
                        stage: 'demo_limits',
                        demoLimited: true,
                        timeUntilNext: demoCheck.timeUntilNext,
                        remaining: demoCheck.remaining
                    };
                }
                
                // –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ demo preimage
                const cryptoValid = await this.verifyCryptographically(preimage, paymentHash);
                if (!cryptoValid) {
                    return { 
                        verified: false, 
                        reason: 'Demo preimage cryptographic verification failed',
                        stage: 'crypto'
                    };
                }
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ demo —Å–µ—Å—Å–∏–∏
                this.registerDemoSessionUsage(userFingerprint);
                
                console.log('‚úÖ Demo session verified successfully');
                return { 
                    verified: true, 
                    method: 'demo',
                    sessionType: 'demo',
                    isDemo: true,
                    warning: 'Demo session - limited duration (6 minutes)',
                    remaining: demoCheck.remaining - 1
                };
            }
            
            // –≠—Ç–∞–ø 3: –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö preimage (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø)
            const cryptoValid = await this.verifyCryptographically(preimage, paymentHash);
            if (!cryptoValid) {
                return { 
                    verified: false, 
                    reason: 'Cryptographic verification failed',
                    stage: 'crypto'
                };
            }

            console.log('‚úÖ Cryptographic verification passed');

            // –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Lightning Network (–µ—Å–ª–∏ –Ω–µ demo —Ä–µ–∂–∏–º)
            if (!this.verificationConfig.isDemo) {
                switch (this.verificationConfig.method) {
                    case 'lnbits':
                        const lnbitsResult = await this.verifyPaymentLNbits(preimage, paymentHash);
                        if (!lnbitsResult.verified) {
                            return {
                                verified: false,
                                reason: lnbitsResult.reason || 'LNbits verification failed',
                                stage: 'lightning',
                                details: lnbitsResult.details
                            };
                        }
                        return lnbitsResult;
                        
                    case 'lnd':
                        const lndResult = await this.verifyPaymentLND(preimage, paymentHash);
                        return lndResult.verified ? lndResult : { 
                            verified: false, 
                            reason: 'LND verification failed',
                            stage: 'lightning'
                        };
                        
                    case 'cln':
                        const clnResult = await this.verifyPaymentCLN(preimage, paymentHash);
                        return clnResult.verified ? clnResult : { 
                            verified: false, 
                            reason: 'CLN verification failed',
                            stage: 'lightning'
                        };
                        
                    case 'btcpay':
                        const btcpayResult = await this.verifyPaymentBTCPay(preimage, paymentHash);
                        return btcpayResult.verified ? btcpayResult : { 
                            verified: false, 
                            reason: 'BTCPay verification failed',
                            stage: 'lightning'
                        };
                    
                    default:
                        console.warn('Unknown verification method, using crypto-only verification');
                        return { 
                            verified: true, 
                            method: 'crypto-only',
                            warning: 'Lightning verification skipped - unknown method'
                        };
                }
            } else {
                // Demo —Ä–µ–∂–∏–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
                console.warn('üö® DEMO MODE: Lightning payment verification bypassed - FOR DEVELOPMENT ONLY');
                return { 
                    verified: true, 
                    method: 'demo-mode',
                    warning: 'DEMO MODE - Lightning verification bypassed'
                };
            }
            
        } catch (error) {
            console.error('‚ùå Payment verification failed:', error);
            return { 
                verified: false, 
                reason: error.message,
                stage: 'error'
            };
        }
    }

    // ============================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò
    // ============================================

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    async safeActivateSession(sessionType, preimage, paymentHash) {
        try {
            console.log(`üöÄ Attempting to activate ${sessionType} session...`);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!sessionType || !preimage || !paymentHash) {
                return { 
                    success: false, 
                    reason: 'Missing required parameters: sessionType, preimage, or paymentHash' 
                };
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
            try {
                this.validateSessionType(sessionType);
            } catch (error) {
                return { 
                    success: false, 
                    reason: error.message 
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            if (this.hasActiveSession()) {
                return { 
                    success: false, 
                    reason: 'Active session already exists. Please wait for it to expire or disconnect.' 
                };
            }
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ demo —Å–µ—Å—Å–∏–π
            if (sessionType === 'demo') {
                if (!this.isDemoPreimage(preimage)) {
                    return {
                        success: false,
                        reason: 'Invalid demo preimage format. Please use the generated demo preimage.'
                    };
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ demo
                const userFingerprint = this.generateUserFingerprint();
                const demoCheck = this.checkDemoSessionLimits(userFingerprint);
                
                if (!demoCheck.allowed) {
                    return {
                        success: false,
                        reason: demoCheck.message,
                        demoLimited: true,
                        timeUntilNext: demoCheck.timeUntilNext,
                        remaining: demoCheck.remaining
                    };
                }
            }
            
            // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
            const verificationResult = await this.verifyPayment(preimage, paymentHash);
            
            if (!verificationResult.verified) {
                return {
                    success: false,
                    reason: verificationResult.reason,
                    stage: verificationResult.stage,
                    method: verificationResult.method,
                    demoLimited: verificationResult.demoLimited,
                    timeUntilNext: verificationResult.timeUntilNext,
                    remaining: verificationResult.remaining
                };
            }
            
            // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            const session = this.activateSession(sessionType, preimage);
            
            console.log(`‚úÖ Session activated successfully: ${sessionType} via ${verificationResult.method}`);
            return {
                success: true,
                sessionType: sessionType,
                method: verificationResult.method,
                details: verificationResult,
                timeLeft: this.getTimeLeft(),
                sessionId: session.id,
                warning: verificationResult.warning,
                isDemo: verificationResult.isDemo || false,
                remaining: verificationResult.remaining
            };
            
        } catch (error) {
            console.error('‚ùå Session activation failed:', error);
            return {
                success: false,
                reason: error.message,
                method: 'error'
            };
        }
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
    activateSession(sessionType, preimage) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
        this.cleanup();

        const pricing = this.sessionPrices[sessionType];
        const now = Date.now();
        
        // –î–ª—è demo —Å–µ—Å—Å–∏–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        let duration;
        if (sessionType === 'demo') {
            duration = this.demoSessionMaxDuration; // 6 –º–∏–Ω—É—Ç
        } else {
            duration = pricing.hours * 60 * 60 * 1000; // –û–±—ã—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        }
        
        const expiresAt = now + duration;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        const sessionId = Array.from(crypto.getRandomValues(new Uint8Array(16)))
            .map(b => b.toString(16).padStart(2, '0')).join('');

        this.currentSession = {
            id: sessionId,
            type: sessionType,
            startTime: now,
            expiresAt: expiresAt,
            preimage: preimage, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            isDemo: sessionType === 'demo'
        };

        this.startSessionTimer();
        
        const durationMinutes = Math.round(duration / (60 * 1000));
        console.log(`üìÖ Session ${sessionId.substring(0, 8)}... activated for ${durationMinutes} minutes`);
        
        return this.currentSession;
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Å—Å–∏–∏
    startSessionTimer() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
        }

        this.sessionTimer = setInterval(() => {
            if (!this.hasActiveSession()) {
                this.expireSession();
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    // –ò—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    expireSession() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
            this.sessionTimer = null;
        }
        
        const expiredSession = this.currentSession;
        this.currentSession = null;
        
        if (expiredSession) {
            console.log(`‚è∞ Session ${expiredSession.id.substring(0, 8)}... expired`);
        }
        
        if (this.onSessionExpired) {
            this.onSessionExpired();
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    hasActiveSession() {
        if (!this.currentSession) return false;
        const isActive = Date.now() < this.currentSession.expiresAt;
        
        if (!isActive && this.currentSession) {
            // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—á–∏—â–∞–µ–º
            this.currentSession = null;
        }
        
        return isActive;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
    getTimeLeft() {
        if (!this.currentSession) return 0;
        return Math.max(0, this.currentSession.expiresAt - Date.now());
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (–¥–ª—è UI)
    forceUpdateTimer() {
        if (this.currentSession) {
            const timeLeft = this.getTimeLeft();
            console.log(`‚è±Ô∏è Timer updated: ${Math.ceil(timeLeft / 1000)}s left`);
            return timeLeft;
        }
        return 0;
    }

    // ============================================
    // DEMO –†–ï–ñ–ò–ú: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    // ============================================

    // –°–æ–∑–¥–∞–Ω–∏–µ demo —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    createDemoSession() {
        const userFingerprint = this.generateUserFingerprint();
        const demoCheck = this.checkDemoSessionLimits(userFingerprint);
        
        if (!demoCheck.allowed) {
            return {
                success: false,
                reason: demoCheck.message,
                timeUntilNext: demoCheck.timeUntilNext,
                remaining: demoCheck.remaining
            };
        }
        
        try {
            const demoPreimage = this.generateSecureDemoPreimage();
            // –î–ª—è demo —Å–µ—Å—Å–∏–π paymentHash –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const demoPaymentHash = 'demo_' + Array.from(crypto.getRandomValues(new Uint8Array(16)))
                .map(b => b.toString(16).padStart(2, '0')).join('');
            
            return {
                success: true,
                sessionType: 'demo',
                preimage: demoPreimage,
                paymentHash: demoPaymentHash,
                duration: this.sessionPrices.demo.hours,
                durationMinutes: Math.round(this.demoSessionMaxDuration / (60 * 1000)),
                warning: `Demo session - limited to ${Math.round(this.demoSessionMaxDuration / (60 * 1000))} minutes`,
                remaining: demoCheck.remaining - 1
            };
        } catch (error) {
            console.error('Failed to create demo session:', error);
            return {
                success: false,
                reason: 'Failed to generate demo session. Please try again.',
                remaining: demoCheck.remaining
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ demo –ª–∏–º–∏—Ç–∞—Ö
    getDemoSessionInfo() {
        const userFingerprint = this.generateUserFingerprint();
        const userData = this.demoSessions.get(userFingerprint);
        const now = Date.now();
        
        if (!userData) {
            return {
                available: this.maxDemoSessionsPerUser,
                used: 0,
                total: this.maxDemoSessionsPerUser,
                nextAvailable: 'immediately',
                cooldownMinutes: 0,
                durationMinutes: Math.round(this.demoSessionMaxDuration / (60 * 1000))
            };
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        const activeSessions = userData.sessions.filter(session => 
            now - session.timestamp < this.demoCooldownPeriod
        );
        
        const available = Math.max(0, this.maxDemoSessionsPerUser - activeSessions.length);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        let cooldownMs = 0;
        let nextAvailable = 'immediately';
        
        if (available === 0) {
            // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
            const oldestSession = Math.min(...activeSessions.map(s => s.timestamp));
            cooldownMs = this.demoCooldownPeriod - (now - oldestSession);
            nextAvailable = `${Math.ceil(cooldownMs / (60 * 1000))} minutes`;
        } else if (userData.lastUsed && (now - userData.lastUsed) < this.demoSessionCooldown) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ—Ç—ã, –Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
            cooldownMs = this.demoSessionCooldown - (now - userData.lastUsed);
            nextAvailable = `${Math.ceil(cooldownMs / (60 * 1000))} minutes`;
        }
        
        return {
            available: available,
            used: activeSessions.length,
            total: this.maxDemoSessionsPerUser,
            nextAvailable: nextAvailable,
            cooldownMinutes: Math.ceil(cooldownMs / (60 * 1000)),
            durationMinutes: Math.round(this.demoSessionMaxDuration / (60 * 1000)),
            canUseNow: available > 0 && cooldownMs <= 0
        };
    }

    // ============================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
    // ============================================

    // –ú–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LND (Lightning Network Daemon)
    async verifyPaymentLND(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.nodeUrl || !this.verificationConfig.macaroon) {
                throw new Error('LND configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.nodeUrl}/v1/invoice/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'Grpc-Metadata-macaroon': this.verificationConfig.macaroon,
                    'Content-Type': 'application/json'
                },
                signal: AbortSignal.timeout(10000)
            });

            if (!response.ok) {
                throw new Error(`LND API request failed: ${response.status}`);
            }

            const invoiceData = await response.json();
            
            if (invoiceData.settled && invoiceData.r_preimage === preimage) {
                return {
                    verified: true,
                    amount: invoiceData.value,
                    method: 'lnd',
                    timestamp: Date.now()
                };
            }

            return { verified: false, reason: 'LND verification failed', method: 'lnd' };
        } catch (error) {
            console.error('LND payment verification failed:', error);
            return { verified: false, reason: error.message, method: 'lnd' };
        }
    }

    // –ú–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CLN (Core Lightning)
    async verifyPaymentCLN(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.nodeUrl) {
                throw new Error('CLN configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.nodeUrl}/v1/listinvoices`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    payment_hash: paymentHash
                }),
                signal: AbortSignal.timeout(10000)
            });

            if (!response.ok) {
                throw new Error(`CLN API request failed: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                if (invoice.status === 'paid' && invoice.payment_preimage === preimage) {
                    return {
                        verified: true,
                        amount: invoice.amount_msat / 1000,
                        method: 'cln',
                        timestamp: Date.now()
                    };
                }
            }

            return { verified: false, reason: 'CLN verification failed', method: 'cln' };
        } catch (error) {
            console.error('CLN payment verification failed:', error);
            return { verified: false, reason: error.message, method: 'cln' };
        }
    }

    // –ú–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ BTCPay Server
    async verifyPaymentBTCPay(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.apiUrl || !this.verificationConfig.apiKey) {
                throw new Error('BTCPay Server configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/invoices/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.verificationConfig.apiKey}`,
                    'Content-Type': 'application/json'
                },
                signal: AbortSignal.timeout(10000)
            });

            if (!response.ok) {
                throw new Error(`BTCPay API request failed: ${response.status}`);
            }

            const invoiceData = await response.json();
            
            if (invoiceData.status === 'Settled' && 
                invoiceData.payment && 
                invoiceData.payment.preimage === preimage) {
                return {
                    verified: true,
                    amount: invoiceData.amount,
                    method: 'btcpay',
                    timestamp: Date.now()
                };
            }

            return { verified: false, reason: 'BTCPay verification failed', method: 'btcpay' };
        } catch (error) {
            console.error('BTCPay payment verification failed:', error);
            return { verified: false, reason: error.message, method: 'btcpay' };
        }
    }

    // ============================================
    // UTILITY –ú–ï–¢–û–î–´
    // ============================================

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ invoice (–Ω–µ demo)
    createInvoice(sessionType) {
        this.validateSessionType(sessionType);
        const pricing = this.sessionPrices[sessionType];

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π payment hash
        const randomBytes = crypto.getRandomValues(new Uint8Array(32));
        const timestamp = Date.now();
        const sessionEntropy = crypto.getRandomValues(new Uint8Array(16));
        
        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω—Ç—Ä–æ–ø–∏–∏
        const combinedEntropy = new Uint8Array(48);
        combinedEntropy.set(randomBytes, 0);
        combinedEntropy.set(new Uint8Array(new BigUint64Array([BigInt(timestamp)]).buffer), 32);
        combinedEntropy.set(sessionEntropy, 40);
        
        const paymentHash = Array.from(crypto.getRandomValues(new Uint8Array(32)))
            .map(b => b.toString(16).padStart(2, '0')).join('');

        return {
            amount: pricing.sats,
            memo: `LockBit.chat ${sessionType} session (${pricing.hours}h) - ${timestamp}`,
            sessionType: sessionType,
            timestamp: timestamp,
            paymentHash: paymentHash,
            lightningAddress: this.staticLightningAddress,
            entropy: Array.from(sessionEntropy).map(b => b.toString(16).padStart(2, '0')).join(''),
            expiresAt: timestamp + (this.verificationConfig.invoiceExpiryMinutes * 60 * 1000)
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
    canActivateSession() {
        return !this.hasActiveSession();
    }

    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    resetSession() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
            this.sessionTimer = null;
        }
        
        const resetSession = this.currentSession;
        this.currentSession = null;
        
        if (resetSession) {
            console.log(`üîÑ Session ${resetSession.id.substring(0, 8)}... reset due to security issue`);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö preimage (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
    startPreimageCleanup() {
        this.preimageCleanupInterval = setInterval(() => {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ preimage –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ë–î permanently
            // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
            if (this.usedPreimages.size > 10000) {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ preimage
                const oldSize = this.usedPreimages.size;
                this.usedPreimages.clear();
                console.log(`üßπ Cleaned ${oldSize} old preimages for memory management`);
            }
        }, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    }

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    cleanup() {
        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
            this.sessionTimer = null;
        }
        if (this.preimageCleanupInterval) {
            clearInterval(this.preimageCleanupInterval);
            this.preimageCleanupInterval = null;
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        this.currentSession = null;
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ù–ï –æ—á–∏—â–∞–µ–º usedPreimages –∏ demoSessions
        // –û–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        
        console.log('üßπ PayPerSessionManager cleaned up');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    getUsageStats() {
        const stats = {
            totalDemoUsers: this.demoSessions.size,
            usedPreimages: this.usedPreimages.size,
            currentSession: this.currentSession ? {
                type: this.currentSession.type,
                timeLeft: this.getTimeLeft(),
                isDemo: this.currentSession.isDemo
            } : null,
            config: {
                maxDemoSessions: this.maxDemoSessionsPerUser,
                demoCooldown: this.demoSessionCooldown / (60 * 1000), // –≤ –º–∏–Ω—É—Ç–∞—Ö
                demoMaxDuration: this.demoSessionMaxDuration / (60 * 1000) // –≤ –º–∏–Ω—É—Ç–∞—Ö
            }
        };
        
        return stats;
    }
}

export { PayPerSessionManager };