class PayPerSessionManager {
    constructor(config = {}) {
        this.sessionPrices = {
            free: { sats: 0, hours: 1/60, usd: 0.00 },
            basic: { sats: 500, hours: 1, usd: 0.20 },
            premium: { sats: 1000, hours: 4, usd: 0.40 },
            extended: { sats: 2000, hours: 24, usd: 0.80 }
        };
        this.currentSession = null;
        this.sessionTimer = null;
        this.onSessionExpired = null;
        this.staticLightningAddress = "dullpastry62@walletofsatoshi.com";
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è LNbits (–≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        this.verificationConfig = {
            method: config.method || 'lnbits',
            apiUrl: config.apiUrl || 'https://demo.lnbits.com',
            apiKey: config.apiKey || '623515641d2e4ebcb1d5992d6d78419c', // –í–∞—à Invoice/read –∫–ª—é—á
            walletId: config.walletId || 'bcd00f561c7b46b4a7b118f069e68997',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ
            isDemo: true,
            demoTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
            retryAttempts: 3
        };
    }

    hasActiveSession() {
        if (!this.currentSession) return false;
        return Date.now() < this.currentSession.expiresAt;
    }

    createInvoice(sessionType) {
        const pricing = this.sessionPrices[sessionType];
        if (!pricing) throw new Error('Invalid session type');

        return {
            amount: pricing.sats,
            memo: `LockBit.chat ${sessionType} session (${pricing.hours}h)`,
            sessionType: sessionType,
            timestamp: Date.now(),
            paymentHash: Array.from(crypto.getRandomValues(new Uint8Array(32)))
                .map(b => b.toString(16).padStart(2, '0')).join(''),
            lightningAddress: this.staticLightningAddress
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Lightning –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ LNbits
    async createLightningInvoice(sessionType) {
        const pricing = this.sessionPrices[sessionType];
        if (!pricing) throw new Error('Invalid session type');

        try {
            console.log(`Creating ${sessionType} invoice for ${pricing.sats} sats...`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            const healthCheck = await fetch(`${this.verificationConfig.apiUrl}/api/v1/health`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey
                }
            });

            if (!healthCheck.ok) {
                throw new Error(`LNbits API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthCheck.status}`);
            }

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments`, {
                method: 'POST',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    out: false, // incoming payment
                    amount: pricing.sats,
                    memo: `LockBit.chat ${sessionType} session (${pricing.hours}h)`,
                    unit: 'sat',
                    expiry: this.verificationConfig.isDemo ? 300 : 900 // 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ–º–æ, 15 –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('LNbits API response:', errorText);
                throw new Error(`LNbits API error ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            
            console.log('‚úÖ Lightning invoice created successfully!', data);
            
            return {
                paymentRequest: data.bolt11 || data.payment_request, // BOLT11 invoice –¥–ª—è QR –∫–æ–¥–∞
                paymentHash: data.payment_hash,
                checkingId: data.checking_id || data.payment_hash, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                amount: data.amount || pricing.sats,
                sessionType: sessionType,
                createdAt: Date.now(),
                expiresAt: Date.now() + (this.verificationConfig.isDemo ? 5 * 60 * 1000 : 15 * 60 * 1000), // 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ–º–æ
                description: data.description || data.memo || `LockBit.chat ${sessionType} session`,
                lnurl: data.lnurl || null,
                memo: data.memo || `LockBit.chat ${sessionType} session`,
                bolt11: data.bolt11 || data.payment_request,
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                payment_request: data.bolt11 || data.payment_request,
                checking_id: data.checking_id || data.payment_hash
            };

        } catch (error) {
            console.error('‚ùå Error creating Lightning invoice:', error);
            
            // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–æ–π—Å
            if (this.verificationConfig.isDemo && error.message.includes('API')) {
                console.log('üîÑ Creating demo invoice for testing...');
                return this.createDemoInvoice(sessionType);
            }
            
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    createDemoInvoice(sessionType) {
        const pricing = this.sessionPrices[sessionType];
        const demoHash = Array.from(crypto.getRandomValues(new Uint8Array(32)))
            .map(b => b.toString(16).padStart(2, '0')).join('');
        
        return {
            paymentRequest: `lntb${pricing.sats}1p${demoHash}...`, // –§–∏–∫—Ç–∏–≤–Ω—ã–π BOLT11
            paymentHash: demoHash,
            checkingId: demoHash,
            amount: pricing.sats,
            sessionType: sessionType,
            createdAt: Date.now(),
            expiresAt: Date.now() + (5 * 60 * 1000), // 5 –º–∏–Ω—É—Ç
            description: `LockBit.chat ${sessionType} session (DEMO)`,
            isDemo: true
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ LNbits
    async checkPaymentStatus(checkingId) {
        try {
            console.log(`üîç Checking payment status for: ${checkingId}`);

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments/${checkingId}`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Payment status check failed:', errorText);
                throw new Error(`Payment check failed: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log('üìä Payment status response:', data);
            
            return {
                paid: data.paid || false,
                preimage: data.preimage || null,
                details: data.details || {},
                amount: data.amount || 0,
                fee: data.fee || 0,
                timestamp: data.timestamp || Date.now(),
                bolt11: data.bolt11 || null
            };

        } catch (error) {
            console.error('‚ùå Error checking payment status:', error);
            
            // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if (this.verificationConfig.isDemo && error.message.includes('API')) {
                console.log('üîÑ Returning demo payment status...');
                return {
                    paid: false,
                    preimage: null,
                    details: { demo: true },
                    amount: 0,
                    fee: 0,
                    timestamp: Date.now()
                };
            }
            
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ 1: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LNbits API
    async verifyPaymentLNbits(preimage, paymentHash) {
        try {
            console.log(`üîê Verifying payment via LNbits: ${paymentHash}`);
            
            if (!this.verificationConfig.apiUrl || !this.verificationConfig.apiKey) {
                throw new Error('LNbits API configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/payments/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'X-Api-Key': this.verificationConfig.apiKey,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('LNbits verification failed:', errorText);
                throw new Error(`API request failed: ${response.status} - ${errorText}`);
            }

            const paymentData = await response.json();
            console.log('üìã Payment verification data:', paymentData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (paymentData.paid && paymentData.preimage === preimage) {
                console.log('‚úÖ Payment verified successfully via LNbits');
                return {
                    verified: true,
                    amount: paymentData.amount,
                    fee: paymentData.fee || 0,
                    timestamp: paymentData.timestamp || Date.now(),
                    method: 'lnbits'
                };
            }

            console.log('‚ùå Payment verification failed: paid=', paymentData.paid, 'preimage match=', paymentData.preimage === preimage);
            return {
                verified: false,
                reason: 'Payment not paid or preimage mismatch',
                method: 'lnbits'
            };
            
        } catch (error) {
            console.error('‚ùå LNbits payment verification failed:', error);
            
            // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            if (this.verificationConfig.isDemo && error.message.includes('API')) {
                console.log('üîÑ Demo payment verification successful');
                return {
                    verified: true,
                    amount: 0,
                    fee: 0,
                    timestamp: Date.now(),
                    method: 'demo'
                };
            }
            
            return {
                verified: false,
                reason: error.message,
                method: 'lnbits'
            };
        }
    }

    // –ú–µ—Ç–æ–¥ 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LND REST API
    async verifyPaymentLND(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.nodeUrl || !this.verificationConfig.macaroon) {
                throw new Error('LND configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.nodeUrl}/v1/invoice/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'Grpc-Metadata-macaroon': this.verificationConfig.macaroon,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`LND API request failed: ${response.status}`);
            }

            const invoiceData = await response.json();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω –∏ preimage —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if (invoiceData.settled && invoiceData.r_preimage === preimage) {
                return true;
            }

            return false;
        } catch (error) {
            console.error('LND payment verification failed:', error);
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ 3: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Core Lightning (CLN)
    async verifyPaymentCLN(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.nodeUrl) {
                throw new Error('CLN configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.nodeUrl}/v1/listinvoices`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    payment_hash: paymentHash
                })
            });

            if (!response.ok) {
                throw new Error(`CLN API request failed: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                if (invoice.status === 'paid' && invoice.payment_preimage === preimage) {
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('CLN payment verification failed:', error);
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Wallet of Satoshi API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    async verifyPaymentWOS(preimage, paymentHash) {
        try {
            // Wallet of Satoshi –æ–±—ã—á–Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            console.warn('Wallet of Satoshi API verification not implemented');
            return false;
        } catch (error) {
            console.error('WOS payment verification failed:', error);
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ 5: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ BTCPay Server
    async verifyPaymentBTCPay(preimage, paymentHash) {
        try {
            if (!this.verificationConfig.apiUrl || !this.verificationConfig.apiKey) {
                throw new Error('BTCPay Server configuration missing');
            }

            const response = await fetch(`${this.verificationConfig.apiUrl}/api/v1/invoices/${paymentHash}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.verificationConfig.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`BTCPay API request failed: ${response.status}`);
            }

            const invoiceData = await response.json();
            
            if (invoiceData.status === 'Settled' && invoiceData.payment && invoiceData.payment.preimage === preimage) {
                return true;
            }

            return false;
        } catch (error) {
            console.error('BTCPay payment verification failed:', error);
            return false;
        }
    }

    // –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è preimage
    async verifyCryptographically(preimage, paymentHash) {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º preimage –≤ –±–∞–π—Ç—ã
            const preimageBytes = new Uint8Array(preimage.match(/.{2}/g).map(byte => parseInt(byte, 16)));
            
            // –í—ã—á–∏—Å–ª—è–µ–º SHA256 –æ—Ç preimage
            const hashBuffer = await crypto.subtle.digest('SHA-256', preimageBytes);
            const computedHash = Array.from(new Uint8Array(hashBuffer))
                .map(b => b.toString(16).padStart(2, '0')).join('');
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å payment_hash
            return computedHash === paymentHash;
        } catch (error) {
            console.error('Cryptographic verification failed:', error);
            return false;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    async verifyPayment(preimage, paymentHash) {
        console.log(`üîê Verifying payment: preimage=${preimage}, hash=${paymentHash}`);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
        if (!preimage || preimage.length !== 64) {
            console.log('‚ùå Invalid preimage length');
            return { verified: false, reason: 'Invalid preimage length' };
        }
        
        if (!/^[0-9a-fA-F]{64}$/.test(preimage)) {
            console.log('‚ùå Invalid preimage format');
            return { verified: false, reason: 'Invalid preimage format' };
        }
        
        // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        if (preimage === '0'.repeat(64)) {
            console.log('‚úÖ Free session preimage accepted');
            return { verified: true, method: 'free' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ preimage –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π
        const dummyPreimages = ['1'.repeat(64), 'a'.repeat(64), 'f'.repeat(64)];
        if (dummyPreimages.includes(preimage)) {
            console.log('‚ùå Dummy preimage detected');
            return { verified: false, reason: 'Dummy preimage detected' };
        }

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
            const cryptoValid = await this.verifyCryptographically(preimage, paymentHash);
            if (!cryptoValid) {
                console.log('‚ùå Cryptographic verification failed');
                return { verified: false, reason: 'Cryptographic verification failed' };
            }

            console.log('‚úÖ Cryptographic verification passed');

            // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            switch (this.verificationConfig.method) {
                case 'lnbits':
                    const lnbitsResult = await this.verifyPaymentLNbits(preimage, paymentHash);
                    return lnbitsResult.verified ? lnbitsResult : { verified: false, reason: 'LNbits verification failed' };
                    
                case 'lnd':
                    const lndResult = await this.verifyPaymentLND(preimage, paymentHash);
                    return lndResult ? { verified: true, method: 'lnd' } : { verified: false, reason: 'LND verification failed' };
                    
                case 'cln':
                    const clnResult = await this.verifyPaymentCLN(preimage, paymentHash);
                    return clnResult ? { verified: true, method: 'cln' } : { verified: false, reason: 'CLN verification failed' };
                    
                case 'btcpay':
                    const btcpayResult = await this.verifyPaymentBTCPay(preimage, paymentHash);
                    return btcpayResult ? { verified: true, method: 'btcpay' } : { verified: false, reason: 'BTCPay verification failed' };
                    
                case 'walletofsatoshi':
                    const wosResult = await this.verifyPaymentWOS(preimage, paymentHash);
                    return wosResult ? { verified: true, method: 'wos' } : { verified: false, reason: 'WOS verification failed' };
                    
                default:
                    console.warn('Unknown verification method, using crypto-only verification');
                    return { verified: cryptoValid, method: 'crypto-only' };
            }
        } catch (error) {
            console.error('‚ùå Payment verification failed:', error);
            return { verified: false, reason: error.message };
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    activateSession(sessionType, preimage) {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
        this.cleanup();

        const pricing = this.sessionPrices[sessionType];
        const now = Date.now();
        const expiresAt = now + (pricing.hours * 60 * 60 * 1000);

        this.currentSession = {
            type: sessionType,
            startTime: now,
            expiresAt: expiresAt,
            preimage: preimage
        };

        this.startSessionTimer();
        return this.currentSession;
    }

    startSessionTimer() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
        }

        this.sessionTimer = setInterval(() => {
            if (!this.hasActiveSession()) {
                this.expireSession();
            }
        }, 60000);
    }

    expireSession() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
        }
        
        this.currentSession = null;
        
        if (this.onSessionExpired) {
            this.onSessionExpired();
        }
    }

    getTimeLeft() {
        if (!this.currentSession) return 0;
        return Math.max(0, this.currentSession.expiresAt - Date.now());
    }

    forceUpdateTimer() {
        if (this.currentSession) {
            const timeLeft = this.getTimeLeft();
            console.log('Timer updated:', timeLeft, 'ms left');
            return timeLeft;
        }
        return 0;
    }

    cleanup() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
        }
        this.currentSession = null;
    }

    resetSession() {
        if (this.sessionTimer) {
            clearInterval(this.sessionTimer);
        }
        this.currentSession = null;
        console.log('Session reset due to failed verification');
    }

    canActivateSession() {
        return !this.hasActiveSession() && !this.currentSession;
    }

    async safeActivateSession(sessionType, preimage, paymentHash) {
        try {
            console.log(`üöÄ Activating session: ${sessionType} with preimage: ${preimage}`);
            
            if (!sessionType || !preimage) {
                console.warn('‚ùå Session activation failed: missing sessionType or preimage');
                return { success: false, reason: 'Missing sessionType or preimage' };
            }
            
            if (!this.sessionPrices[sessionType]) {
                console.warn('‚ùå Session activation failed: invalid session type');
                return { success: false, reason: 'Invalid session type' };
            }
            
            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            const verificationResult = await this.verifyPayment(preimage, paymentHash);
            
            if (verificationResult.verified) {
                this.activateSession(sessionType, preimage);
                console.log(`‚úÖ Session activated successfully: ${sessionType} via ${verificationResult.method}`);
                return {
                    success: true,
                    sessionType: sessionType,
                    method: verificationResult.method,
                    details: verificationResult,
                    timeLeft: this.getTimeLeft()
                };
            } else {
                console.log('‚ùå Payment verification failed:', verificationResult.reason);
                return {
                    success: false,
                    reason: verificationResult.reason,
                    method: verificationResult.method
                };
            }
        } catch (error) {
            console.error('‚ùå Session activation failed:', error);
            return {
                success: false,
                reason: error.message,
                method: 'error'
            };
        }
    }
}

export { PayPerSessionManager };