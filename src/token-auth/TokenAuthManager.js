// ============================================
// TOKEN AUTHENTICATION MANAGER
// ============================================
// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ERC-20/ERC-721 —Ç–æ–∫–µ–Ω—ã
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MetaMask –∏ –¥—Ä—É–≥–∏–µ Web3 –∫–æ—à–µ–ª—å–∫–∏
// ============================================

class TokenAuthManager {
    constructor() {
        this.currentSession = null;
        this.walletAddress = null;
        this.tokenContract = null;
        this.isInitialized = false;
        this.sessionTimeout = null;
        this.heartbeatInterval = null;
        
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        this.TOKEN_TYPES = {
            MONTHLY: 'monthly',
            YEARLY: 'yearly'
        };
        
        this.SESSION_TIMEOUT = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        this.HEARTBEAT_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        // –°–æ–±—ã—Ç–∏—è
        this.events = {
            onLogin: null,
            onLogout: null,
            onTokenExpired: null,
            onSessionExpired: null,
            onWalletConnected: null,
            onWalletDisconnected: null
        };
        
        this.initialize();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    async initialize() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web3
            if (typeof window.ethereum !== 'undefined') {
                console.log('‚úÖ Web3 detected');
                await this.setupWeb3();
            } else {
                console.warn('‚ö†Ô∏è Web3 not detected, MetaMask required');
                this.showWeb3RequiredMessage();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
            await this.checkExistingSession();
            
            this.isInitialized = true;
            console.log('‚úÖ TokenAuthManager initialized');
            
        } catch (error) {
            console.error('‚ùå TokenAuthManager initialization failed:', error);
            throw error;
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    async setupWeb3() {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            const accounts = await window.ethereum.request({ 
                method: 'eth_requestAccounts' 
            });
            
            if (accounts.length > 0) {
                this.walletAddress = accounts[0];
                console.log('üîó Wallet connected:', this.walletAddress);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                window.ethereum.on('accountsChanged', (accounts) => {
                    this.handleAccountChange(accounts);
                });
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∏
                window.ethereum.on('chainChanged', (chainId) => {
                    this.handleChainChange(chainId);
                });
                
                this.triggerEvent('onWalletConnected', this.walletAddress);
                
            } else {
                throw new Error('No accounts found');
            }
            
        } catch (error) {
            console.error('‚ùå Web3 setup failed:', error);
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    async checkExistingSession() {
        try {
            const sessionData = localStorage.getItem('securebit_token_session');
            if (sessionData) {
                const session = JSON.parse(sessionData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
                if (this.isSessionValid(session)) {
                    this.currentSession = session;
                    console.log('‚úÖ Existing session restored');
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–∏
                    this.startSessionMonitoring();
                    
                    return true;
                } else {
                    // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
                    localStorage.removeItem('securebit_token_session');
                    console.log('üóëÔ∏è Invalid session removed');
                }
            }
            
            return false;
            
        } catch (error) {
            console.error('‚ùå Session check failed:', error);
            return false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    isSessionValid(session) {
        if (!session || !session.tokenId || !session.expiresAt) {
            return false;
        }
        
        const now = Date.now();
        const expiresAt = new Date(session.expiresAt).getTime();
        
        return now < expiresAt;
    }
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
    async authenticateWithToken(tokenId, tokenType) {
        try {
            if (!this.walletAddress) {
                throw new Error('Wallet not connected');
            }
            
            console.log('üîê Authenticating with token:', { tokenId, tokenType, wallet: this.walletAddress });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            const tokenValid = await this.validateTokenInContract(tokenId, tokenType);
            
            if (!tokenValid) {
                throw new Error('Invalid or expired token');
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            const session = await this.createSession(tokenId, tokenType);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            await this.terminateOtherSessions(tokenId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            this.currentSession = session;
            localStorage.setItem('securebit_token_session', JSON.stringify(session));
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.startSessionMonitoring();
            
            console.log('‚úÖ Authentication successful');
            this.triggerEvent('onLogin', session);
            
            return session;
            
        } catch (error) {
            console.error('‚ùå Authentication failed:', error);
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    async validateTokenInContract(tokenId, tokenType) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Web3
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            console.log('üîç Validating token in contract:', { tokenId, tokenType });
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
            const isValid = await this.mockTokenValidation(tokenId, tokenType);
            
            return isValid;
            
        } catch (error) {
            console.error('‚ùå Token validation failed:', error);
            return false;
        }
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    async mockTokenValidation(tokenId, tokenType) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const tokenHash = this.hashString(tokenId + tokenType + this.walletAddress);
        const isValid = tokenHash % 10 !== 0; // 90% —Ç–æ–∫–µ–Ω–æ–≤ –≤–∞–ª–∏–¥–Ω—ã
        
        console.log('üîç Mock token validation result:', { tokenId, tokenType, isValid });
        
        return isValid;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    async createSession(tokenId, tokenType) {
        const now = Date.now();
        const expiresAt = this.calculateTokenExpiry(tokenType);
        
        const session = {
            id: this.generateSessionId(),
            tokenId: tokenId,
            tokenType: tokenType,
            walletAddress: this.walletAddress,
            createdAt: now,
            expiresAt: expiresAt,
            lastActivity: now,
            signature: await this.signSessionData(tokenId, tokenType)
        };
        
        console.log('üìù Session created:', session);
        return session;
    }
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    calculateTokenExpiry(tokenType) {
        const now = Date.now();
        
        switch (tokenType) {
            case this.TOKEN_TYPES.MONTHLY:
                return now + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
            case this.TOKEN_TYPES.YEARLY:
                return now + (365 * 24 * 60 * 60 * 1000); // 365 –¥–Ω–µ–π
            default:
                throw new Error('Invalid token type');
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // –ü–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    async signSessionData(tokenId, tokenType) {
        try {
            const message = `SecureBit Token Auth\nToken: ${tokenId}\nType: ${tokenType}\nWallet: ${this.walletAddress}\nTimestamp: ${Date.now()}`;
            
            const signature = await window.ethereum.request({
                method: 'personal_sign',
                params: [message, this.walletAddress]
            });
            
            return signature;
            
        } catch (error) {
            console.error('‚ùå Session signing failed:', error);
            throw error;
        }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    async terminateOtherSessions(tokenId) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ WebRTC –∏–ª–∏ WebSocket
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            console.log('üîÑ Terminating other sessions for token:', tokenId);
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            // –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            
        } catch (error) {
            console.error('‚ùå Session termination failed:', error);
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏
    startSessionMonitoring() {
        if (this.sessionTimeout) {
            clearTimeout(this.sessionTimeout);
        }
        
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
        }
        
        // –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const timeUntilExpiry = this.currentSession.expiresAt - Date.now();
        this.sessionTimeout = setTimeout(() => {
            this.handleSessionExpired();
        }, timeUntilExpiry);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.heartbeatInterval = setInterval(() => {
            this.updateSessionActivity();
        }, this.HEARTBEAT_INTERVAL);
        
        console.log('‚è∞ Session monitoring started');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    handleSessionExpired() {
        console.log('‚è∞ Session expired');
        
        this.currentSession = null;
        localStorage.removeItem('securebit_token_session');
        
        this.triggerEvent('onSessionExpired');
        this.triggerEvent('onLogout');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showSessionExpiredMessage();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    updateSessionActivity() {
        if (this.currentSession) {
            this.currentSession.lastActivity = Date.now();
            localStorage.setItem('securebit_token_session', JSON.stringify(this.currentSession));
        }
    }
    
    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    async logout() {
        try {
            console.log('üö™ Logging out');
            
            if (this.currentSession) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                await this.terminateOtherSessions(this.currentSession.tokenId);
                
                this.currentSession = null;
                localStorage.removeItem('securebit_token_session');
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            if (this.sessionTimeout) {
                clearTimeout(this.sessionTimeout);
                this.sessionTimeout = null;
            }
            
            if (this.heartbeatInterval) {
                clearInterval(this.heartbeatInterval);
                this.heartbeatInterval = null;
            }
            
            this.triggerEvent('onLogout');
            console.log('‚úÖ Logout successful');
            
        } catch (error) {
            console.error('‚ùå Logout failed:', error);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
    async handleAccountChange(accounts) {
        console.log('üîÑ Account changed:', accounts);
        
        if (accounts.length === 0) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –∫–æ—à–µ–ª–µ–∫
            await this.logout();
            this.walletAddress = null;
            this.triggerEvent('onWalletDisconnected');
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –∞–∫–∫–∞—É–Ω—Ç
            const newAddress = accounts[0];
            if (newAddress !== this.walletAddress) {
                this.walletAddress = newAddress;
                await this.logout(); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
                this.triggerEvent('onWalletConnected', newAddress);
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–∏
    async handleChainChange(chainId) {
        console.log('üîÑ Chain changed:', chainId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è —Å–µ—Ç—å
        const supportedChains = ['0x1', '0x3', '0x5']; // Mainnet, Ropsten, Goerli
        
        if (!supportedChains.includes(chainId)) {
            console.warn('‚ö†Ô∏è Unsupported network:', chainId);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showUnsupportedNetworkMessage(chainId);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    isAuthenticated() {
        return this.currentSession !== null && this.isSessionValid(this.currentSession);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    getCurrentSession() {
        return this.currentSession;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    getTokenInfo() {
        if (!this.currentSession) {
            return null;
        }
        
        const now = Date.now();
        const expiresAt = this.currentSession.expiresAt;
        const timeLeft = expiresAt - now;
        
        return {
            tokenId: this.currentSession.tokenId,
            tokenType: this.currentSession.tokenType,
            expiresAt: expiresAt,
            timeLeft: timeLeft,
            isExpired: timeLeft <= 0,
            formattedTimeLeft: this.formatTimeLeft(timeLeft)
        };
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    formatTimeLeft(timeLeft) {
        if (timeLeft <= 0) {
            return 'Expired';
        }
        
        const days = Math.floor(timeLeft / (24 * 60 * 60 * 1000));
        const hours = Math.floor((timeLeft % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
        const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
        
        if (days > 0) {
            return `${days}d ${hours}h`;
        } else if (hours > 0) {
            return `${hours}h ${minutes}m`;
        } else {
            return `${minutes}m`;
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    on(event, callback) {
        if (this.events.hasOwnProperty(event)) {
            this.events[event] = callback;
        }
    }
    
    // –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏–π
    triggerEvent(event, data) {
        if (this.events[event] && typeof this.events[event] === 'function') {
            this.events[event](data);
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return Math.abs(hash);
    }
    
    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showWeb3RequiredMessage() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ Web3
        const message = 'Web3 wallet (MetaMask) required for authentication';
        console.warn('‚ö†Ô∏è', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    showSessionExpiredMessage() {
        const message = 'Your session has expired. Please authenticate again.';
        console.warn('‚è∞', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    showUnsupportedNetworkMessage(chainId) {
        const message = `Unsupported network detected: ${chainId}. Please switch to a supported network.`;
        console.warn('‚ö†Ô∏è', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        if (this.sessionTimeout) {
            clearTimeout(this.sessionTimeout);
        }
        
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
        }
        
        this.currentSession = null;
        this.walletAddress = null;
        this.isInitialized = false;
        
        console.log('üóëÔ∏è TokenAuthManager destroyed');
    }
}

export { TokenAuthManager };
